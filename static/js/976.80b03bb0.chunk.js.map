{"version":3,"file":"static/js/976.80b03bb0.chunk.js","mappings":"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","sources":["components/flashcard.tsx","components/EndGame.tsx","pages/quizScreen/QuizScreenPage.tsx"],"sourcesContent":["import React from \"react\";\r\nimport Card from \"@mui/material/Card\";\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport CardMedia from \"@mui/material/CardMedia\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport { Alert, Grid, Snackbar } from \"@mui/material\";\r\nimport CircleIcon from \"@mui/icons-material/Circle\";\r\nimport AppCtx, { TRANSLATION_KEYS } from \"../store/app-state-context\";\r\nimport { GameStep } from \"../pages/quizScreen/QuizScreenPage\";\r\n\r\ninterface Props {\r\n  stepNumber: number;\r\n  step: GameStep;\r\n  settingScore: React.Dispatch<React.SetStateAction<number>>;\r\n  settingAttempted: React.Dispatch<React.SetStateAction<number>>;\r\n}\r\n\r\ntype Color =\r\n  | \"primary\"\r\n  | \"inherit\"\r\n  | \"secondary\"\r\n  | \"success\"\r\n  | \"error\"\r\n  | \"info\"\r\n  | \"warning\"\r\n  | undefined;\r\n\r\nexport const FlashCard: React.FC<Props> = ({\r\n  stepNumber,\r\n  step,\r\n  settingScore,\r\n  settingAttempted,\r\n}) => {\r\n  const [disabled, setDisabled] = React.useState([false, false]);\r\n  const [colors, setColors] = React.useState<[Color, Color]>([\r\n    \"primary\",\r\n    \"primary\",\r\n  ]);\r\n  const [chosen, setChosen] = React.useState(false);\r\n  const [successAlert, setSuccessAlert] = React.useState(false);\r\n  const [open, setOpen] = React.useState(false);\r\n  const [internalScore, setInternalScore] = React.useState(0);\r\n  const ctx = React.useContext(AppCtx);\r\n  const t = (key: TRANSLATION_KEYS) =>\r\n    ctx.translations[ctx.nativeLanguage]\r\n      ? ctx.translations[ctx.nativeLanguage][key]\r\n      : ctx.translations[\"en\"][key];\r\n\r\n  React.useEffect(() => {\r\n    setDisabled([false, false]);\r\n    setColors([\"primary\", \"primary\"]);\r\n    setChosen(false);\r\n    setSuccessAlert(false);\r\n    setOpen(false);\r\n  }, [step.options]);\r\n\r\n  const handleClose = (\r\n    event?: React.SyntheticEvent | Event,\r\n    reason?: string\r\n  ) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleSubmit = (\r\n    event: React.MouseEvent<HTMLElement>,\r\n    selected: number\r\n  ) => {\r\n    event.preventDefault();\r\n    if (chosen) {\r\n      return;\r\n    }\r\n    setChosen(true);\r\n    const newColors: [Color, Color] = [\"primary\", \"primary\"];\r\n    const newView = [false, false];\r\n    if (selected === step.options.correctIndex) {\r\n      newColors[selected] = \"success\";\r\n      newView[1 - selected] = true;\r\n      setSuccessAlert(true);\r\n      setInternalScore(internalScore + 1);\r\n      settingScore((oldScore) => oldScore + 1);\r\n    } else {\r\n      newColors[selected] = \"error\";\r\n      newView[1 - selected] = true;\r\n      setSuccessAlert(false);\r\n    }\r\n    setOpen(true);\r\n    setColors(newColors);\r\n    setDisabled(newView);\r\n    settingAttempted(stepNumber);\r\n    setChosen(true);\r\n    // console.log(internalScore)\r\n  };\r\n  return (\r\n    <Card>\r\n      <CardMedia\r\n        sx={{ width: 300, height: 300, objectFit: \"contain\" }}\r\n        image={step.imageUrl}\r\n        title=\"Detected object\"\r\n      />\r\n      <CardContent>\r\n        <Typography variant=\"body2\" color=\"text.secondary\">\r\n          {t(\"SELECT_THE_TRANSLATION_IN\") + \" \"}\r\n        </Typography>\r\n        <Typography gutterBottom variant=\"h5\" component=\"div\">\r\n          {ctx.availableLanguages[step.target_language]}\r\n          {/* Japanese */}\r\n        </Typography>\r\n        <Grid container spacing={1} direction=\"column\" alignItems=\"center\">\r\n          <Grid item>\r\n            <Button\r\n              sx={{ width: 200, justifyContent: \"left\" }}\r\n              onClick={(event) => handleSubmit(event, 0)}\r\n              color={colors[0]}\r\n              disabled={disabled[0]}\r\n              variant=\"contained\"\r\n              startIcon={<CircleIcon />}\r\n            >\r\n              {step.options.text[0]}\r\n            </Button>\r\n          </Grid>\r\n          <Grid item>\r\n            <Button\r\n              sx={{ width: 200, justifyContent: \"left\" }}\r\n              onClick={(event) => handleSubmit(event, 1)}\r\n              color={colors[1]}\r\n              disabled={disabled[1]}\r\n              variant=\"contained\"\r\n              startIcon={<CircleIcon />}\r\n            >\r\n              {step.options.text[1]}\r\n            </Button>\r\n          </Grid>\r\n          <Grid item sx={{ mb: 1, width: 260 }}>\r\n            <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\r\n              {successAlert ? (\r\n                <Alert severity=\"success\">{t(\"GAME_GREAT_JOB\")}</Alert>\r\n              ) : (\r\n                <Alert severity=\"error\">{t(\"GAME_TRY_AGAIN\")}</Alert>\r\n              )}\r\n              {/* {errorAlert ?  : null} */}\r\n            </Snackbar>\r\n          </Grid>\r\n        </Grid>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default FlashCard;\r\n","import Zoom from \"@mui/material/Zoom\";\r\nimport { Card, CardContent, CardMedia, Typography } from \"@mui/material\";\r\n\r\ninterface Props {\r\n  practice?: boolean;\r\n  points?: number;\r\n}\r\n\r\nexport default function EndGame(props: Props) {\r\n  return (\r\n    <Zoom in>\r\n      <Card sx={{ m: 2 }}>\r\n        <CardMedia\r\n          image=\"https://media3.giphy.com/media/2lQCBjuFMLCOvXno4l/giphy.gif?cid=790b7611414a93ff27434e7720b57442c72908f898602023&rid=giphy.gif&ct=gf\"\r\n          sx={{\r\n            m: 2,\r\n            width: 200,\r\n            height: 200,\r\n            marginLeft: \"auto\",\r\n            marginRight: \"auto\",\r\n            objectFit: \"contain\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"center\",\r\n          }}\r\n        />\r\n        <CardContent>\r\n          <Typography variant=\"h4\" color=\"text.primary\" align=\"center\">\r\n            We are rooting for you!\r\n          </Typography>\r\n          <Typography variant=\"h6\" color=\"text.secondary\" align=\"center\">\r\n            You've done a great job so far, keep up the good work!\r\n          </Typography>\r\n          {props.practice ? null : (\r\n            <Typography variant=\"h6\" color=\"primary\" align=\"center\">\r\n              You've earned {props.points} points!\r\n            </Typography>\r\n          )}\r\n          <Typography variant=\"subtitle1\" color=\"text.secondary\" align=\"center\">\r\n            Didn't get to play? Upload some objects you would like to learn\r\n            about!\r\n          </Typography>\r\n        </CardContent>\r\n      </Card>\r\n    </Zoom>\r\n  );\r\n}\r\n","import { Box, Button } from \"@mui/material\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport TopNavigation from \"../../components/TopNavigation\";\r\nimport Stepper from \"@mui/material/Stepper\";\r\nimport Step from \"@mui/material/Step\";\r\nimport StepLabel from \"@mui/material/StepLabel\";\r\nimport FlashCard from \"../../components/flashcard\";\r\nimport EndGame from \"../../components/EndGame\";\r\n\r\nexport interface GameStep {\r\n  imageUrl: string;\r\n  target_text: string;\r\n  target_language: string;\r\n  options: { correctIndex: number; text: [string, string] };\r\n}\r\n\r\nconst gameSteps: GameStep[] = [\r\n  {\r\n    imageUrl:\r\n      \"https://images.pexels.com/photos/35188/child-childrens-baby-children-s.jpg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1\",\r\n    target_text: \"Children\",\r\n    target_language: \"ja\",\r\n    options: { correctIndex: 1, text: [\"猫\", \"子供達\"] },\r\n  },\r\n  {\r\n    imageUrl:\r\n      \"https://images.pexels.com/photos/1391498/pexels-photo-1391498.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1\",\r\n    target_text: \"Girl\",\r\n    target_language: \"ja\",\r\n    options: {\r\n      correctIndex: 1,\r\n      text: [\"男の子\", \"女の子\"],\r\n    },\r\n  },\r\n  {\r\n    imageUrl:\r\n      \"https://images.pexels.com/photos/1108099/pexels-photo-1108099.jpeg?auto=compress&cs=tinysrgb&w=1600\",\r\n    target_text: \"Dog\",\r\n    target_language: \"ja\",\r\n    options: {\r\n      correctIndex: 1,\r\n      text: [\"猫\", \"犬\"],\r\n    },\r\n  },\r\n  {\r\n    imageUrl:\r\n      \"https://images.pexels.com/photos/45201/kitty-cat-kitten-pet-45201.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1\",\r\n    target_text: \"Cat\",\r\n    target_language: \"ja\",\r\n    options: {\r\n      correctIndex: 0,\r\n      text: [\"猫\", \"犬\"],\r\n    },\r\n  },\r\n  {\r\n    imageUrl:\r\n      \"https://images.pexels.com/photos/635499/pexels-photo-635499.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1\",\r\n    target_text: \"Horse\",\r\n    target_language: \"hi\",\r\n    options: {\r\n      correctIndex: 0,\r\n      text: [\"घोड़ा\", \"बंदर\"],\r\n    },\r\n  },\r\n  {\r\n    imageUrl:\r\n      \"https://images.pexels.com/photos/12860439/pexels-photo-12860439.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1\",\r\n    target_text: \"Camera\",\r\n    target_language: \"ja\",\r\n    options: {\r\n      correctIndex: 1,\r\n      text: [\"スプーン\", \"カメラ\"],\r\n    },\r\n  },\r\n  {\r\n    imageUrl:\r\n      \"https://images.pexels.com/photos/4168645/pexels-photo-4168645.jpeg\",\r\n    target_text: \"Biscuits\",\r\n    target_language: \"es\",\r\n    options: {\r\n      correctIndex: 0,\r\n      text: [\"Galletas\", \"sopa\"],\r\n    },\r\n  },\r\n  {\r\n    imageUrl:\r\n      \"https://images.pexels.com/photos/1670413/pexels-photo-1670413.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1\",\r\n    target_text: \"Monkey\",\r\n    target_language: \"es\",\r\n    options: {\r\n      correctIndex: 1,\r\n      text: [\"caballo\", \"mono\"],\r\n    },\r\n  },\r\n];\r\n\r\nexport default function QuizScreen() {\r\n  const [activeStep, setActiveStep] = React.useState<number>(0);\r\n  const [skipped, setSkipped] = React.useState(new Set<number>());\r\n  const navigate = useNavigate();\r\n  const [steps, setSteps] = useState<GameStep[]>(gameSteps);\r\n  const [score, setScore] = useState(0);\r\n  const [attempted, setAttempted] = useState<number>(0);\r\n  const [loaded, setLoaded] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // steps.length && createOptions();\r\n    setLoaded(true);\r\n  }, [steps]);\r\n\r\n  const isStepOptional = (step: number) => {\r\n    return step !== attempted;\r\n  };\r\n\r\n  const isNextPossible = (step: number) => {\r\n    return step === attempted;\r\n  };\r\n  const isStepSkipped = (step: number) => {\r\n    return skipped.has(step);\r\n  };\r\n\r\n  const handleNext = () => {\r\n    let newSkipped = skipped;\r\n    if (isStepSkipped(activeStep)) {\r\n      newSkipped = new Set(newSkipped.values());\r\n      newSkipped.delete(activeStep);\r\n    }\r\n    setAttempted(0);\r\n    setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n    setSkipped(newSkipped);\r\n  };\r\n\r\n  const handleBack = () => {\r\n    setActiveStep((prevActiveStep) => prevActiveStep - 1);\r\n  };\r\n\r\n  const handleSkip = () => {\r\n    if (!isStepOptional(activeStep)) {\r\n      // You probably want to guard against something like this,\r\n      // it should never occur unless someone's actively trying to break something.\r\n      throw new Error(\"You can't skip a step that isn't optional.\");\r\n    }\r\n    setAttempted(0);\r\n    setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n    setSkipped((prevSkipped) => {\r\n      const newSkipped = new Set(prevSkipped.values());\r\n      newSkipped.add(activeStep);\r\n      return newSkipped;\r\n    });\r\n  };\r\n\r\n  const handleEnd = () => {\r\n    // setActiveStep(0);\r\n    navigate(`/game`);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <TopNavigation />\r\n      {loaded ? (\r\n        <Box sx={{ width: \"100%\", marginTop: 4 }}>\r\n          <Stepper\r\n            activeStep={activeStep}\r\n            sx={{\r\n              width: \"100%\",\r\n              \".MuiStep-root\": {\r\n                paddingLeft: 0,\r\n              },\r\n            }}\r\n          >\r\n            {steps.map((label, index) => {\r\n              const stepProps: { completed?: boolean } = {};\r\n              const labelProps: {\r\n                optional?: React.ReactNode;\r\n              } = {};\r\n              if (isStepSkipped(index)) {\r\n                stepProps.completed = false;\r\n              }\r\n              return (\r\n                <Step key={index} {...stepProps}>\r\n                  <StepLabel {...labelProps}></StepLabel>\r\n                </Step>\r\n              );\r\n            })}\r\n          </Stepper>\r\n          {activeStep === steps.length ? (\r\n            <React.Fragment>\r\n              <EndGame points={score} />\r\n              <Box sx={{ display: \"flex\", flexDirection: \"row\", pt: 2 }}>\r\n                <Box sx={{ flex: \"1 1 auto\" }} />\r\n                <Button onClick={handleEnd}>End Game</Button>\r\n              </Box>\r\n            </React.Fragment>\r\n          ) : (\r\n            <React.Fragment>\r\n              <Box\r\n                sx={{\r\n                  display: \"flex\",\r\n                  flexDirection: \"column\",\r\n                  m: 2,\r\n                  alignItems: \"center\",\r\n                }}\r\n              >\r\n                <FlashCard\r\n                  stepNumber={activeStep}\r\n                  step={steps[activeStep]}\r\n                  settingScore={setScore}\r\n                  settingAttempted={setAttempted}\r\n                />\r\n              </Box>\r\n              <Box sx={{ display: \"flex\", flexDirection: \"row\", pt: 2 }}>\r\n                <Box sx={{ flex: \"1 1 auto\" }} />\r\n                {isStepOptional(activeStep) && (\r\n                  <Button color=\"inherit\" onClick={handleSkip} sx={{ mr: 1 }}>\r\n                    Skip\r\n                  </Button>\r\n                )}\r\n                {isNextPossible(activeStep) && (\r\n                  <Button onClick={handleNext}>\r\n                    {activeStep === steps.length - 1 ? \"Finish\" : \"Next\"}\r\n                  </Button>\r\n                )}\r\n              </Box>\r\n            </React.Fragment>\r\n          )}\r\n        </Box>\r\n      ) : (\r\n        <p>Loading...</p>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n"],"names":["stepNumber","step","settingScore","settingAttempted","React","disabled","setDisabled","colors","setColors","chosen","setChosen","successAlert","setSuccessAlert","open","setOpen","internalScore","setInternalScore","ctx","AppCtx","t","key","translations","nativeLanguage","options","handleSubmit","event","selected","preventDefault","newColors","newView","correctIndex","oldScore","Card","CardMedia","sx","width","height","objectFit","image","imageUrl","title","CardContent","Typography","variant","color","gutterBottom","component","availableLanguages","target_language","Grid","container","spacing","direction","alignItems","item","Button","justifyContent","onClick","startIcon","Circle","text","mb","Snackbar","autoHideDuration","onClose","reason","Alert","severity","EndGame","props","Zoom","Z","in","m","marginLeft","marginRight","align","practice","points","gameSteps","target_text","QuizScreen","activeStep","setActiveStep","Set","skipped","setSkipped","navigate","useNavigate","useState","steps","score","setScore","attempted","setAttempted","loaded","setLoaded","useEffect","isStepOptional","isStepSkipped","has","TopNavigation","Box","marginTop","Stepper","paddingLeft","map","label","index","stepProps","completed","Step","StepLabel","length","display","flexDirection","pt","flex","Error","prevActiveStep","prevSkipped","newSkipped","values","add","mr","delete"],"sourceRoot":""}